name: CI

on: [push]

jobs:
  build_app:
    name: Build app for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            artifact_name: groundstation-app-linux-amd64-appimage
          - os: windows-latest
            artifact_name: groundstation-app-windows-msvc-amd64
          - os: macOS-latest
            artifact_name: groundstation-app-macos-amd64
    steps:
    - uses: actions/checkout@v3
    - name: Install Qt
      uses: jurplel/install-qt-action@v3.2.1
      with:
        # Additional Qt modules to install
        modules: qtserialport
        version: 6.5.*
    - name: Build (*nix)
      run: |
        cd groundstation-app
        qmake groundstation-app.pro
        make
      if: matrix.os != 'windows-latest'
    - name: Prepare build environment (Windows)
      uses: ilammy/msvc-dev-cmd@v1.12.1
    - name: Build (Windows)
      run: |
        cd groundstation-app
        qmake groundstation-app.pro -spec win32-msvc
        nmake
      if: matrix.os == 'windows-latest'
    - name: Prepare artifacts (Windows)
      run: |
        mkdir dist
        mv .\groundstation-app\release\groundstation-app.exe .\dist\groundstation.exe
        windeployqt --no-translations .\dist\groundstation.exe
      if: matrix.os == 'windows-latest'
    - name: Prepare artifacts (macOS)
      run: |
        mkdir dist
        mv groundstation-app/groundstation-app.app dist/Groundstation.app
        macdeployqt dist/Groundstation.app
      if: matrix.os == 'macOS-latest'
    - name: Prepare artifacts (Linux)
      run: |
        sudo apt-get install -y libxkbcommon-x11-0 libxcb-cursor0 libfuse2
        mkdir dist
        cd groundstation-app
        make install INSTALL_ROOT=AppDir
        cd ..
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        wget -O linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy
        chmod +x *.AppImage
        cd dist
        cp ../groundstation-app/images/icon.svg ../groundstation-app.svg
        ../linuxdeploy --appdir ../groundstation-app/AppDir -e ../groundstation-app/AppDir/opt/groundstation-app/bin/groundstation-app -i ../groundstation-app.svg --create-desktop-file --plugin qt -o appimage
      if: matrix.os == 'ubuntu-latest'
    - name: Copy license and readme
      run: |
        cp LICENSE dist/
        cp README.md dist/
    - name: Publish artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: dist
  release:
    name: Create GitHub release on tag
    needs: build_app
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - name: Get Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: groundstation-app-linux-amd64-appimage
      - name: Get Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: groundstation-app-windows-msvc-amd64
      - name: Get macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: groundstation-app-macos-amd64
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Prepare assets
        run: |
          zip -r groundstation-app-linux-amd64-appimage.zip groundstation-app-linux-amd64-appimage
          zip -r groundstation-app-windows-msvc-amd64.zip groundstation-app-windows-msvc-amd64
          zip -r groundstation-app-macos-amd64.zip groundstation-app-macos-amd64
          zip -r groundstation-arduino-code.zip groundstation-ino
      - name: Create release
        id: create_release
        uses: marvinpinto/action-automatic-releases@v1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ steps.get_version.outputs.VERSION }}
          title: Release ${{ steps.get_version.outputs.VERSION }}
          draft: true
          files: |
            *.zip
